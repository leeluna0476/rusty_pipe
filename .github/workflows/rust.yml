name: Rust Targeted Cargo Check

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Find changed .rs files in src/
      id: find_rs_files
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          base_sha="${{ github.event.pull_request.base.sha }}"
        else
          base_sha="${{ github.event.before }}"
        fi

        echo "üîç Checking for modified .rs files under src/..."

        changed_files=$(git diff --name-only "$base_sha" ${{ github.sha }} | grep '^.*src/.*\.rs$' || true)

        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$changed_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Run cargo check for each affected crate
      if: steps.find_rs_files.outputs.changed_files != ''
      run: |
        echo "${{ steps.find_rs_files.outputs.changed_files }}" | while read filepath; do
          crate_dir=$(echo "$filepath" | grep -oE '^.*/src' | sed 's:/src$::')
          if [ -d "$crate_dir" ]; then
            echo "üß™ Running cargo check in $crate_dir (due to change in $filepath)"
            (cd "$crate_dir" && cargo check --verbose)
          else
            echo "‚ö†Ô∏è Could not resolve crate directory for: $filepath"
          fi
        done
